% Demo file for Frequency Domain Continuous-time Model identification with
% Time-Delay from Relay Feedback Tests
% Copyright:
% 		Hugues GARNIER
%       Fengwei CHEN, 23 July 2018
%
% Related papers:
%
%   Chen, F., Garnier, H., Gilson, M., X. Zhuan, "Frequency domain
%   identification of continuous-time output-error models with time-delay
%   from relay feedback tests",
%   Submitted to a journal, 2018. 

echo off
clear
clc
close all
 
clc
disp(' ')
disp(' ')
disp('                CONTINUOUS-TIME MODEL IDENTIFICATION ')
disp('                     with the CONTSID toolbox')
disp('               --------------------------------------')
disp(' ')

disp('    This demo shows the performance of the CONTSID Frequency Domain')
disp('    Continuous-time COE-based method for Transfer Function Models')
disp('     (TFFCOE).')
disp('   ')
disp('    The TFFCOE method is used here to estimate a continuous-time');
disp('    system with time-delay relay feedback test.')
disp('   ')
disp('    For further explanations see:')
disp('    F. Chen, H. Garnier, M. Gilson and X. Zhuan')
disp('    "Frequency domain identification of continuous-time output-error ')
disp('    models with time-delay from relay feedback tests".')
disp('    Submitted to a journal (2018)')
disp('   ')
disp('    Hit any key to continue')

    echo on
    pause
    clc

%   Consider a continuous-time SISO second order system with time-delay
%   described by the following statement

    iodelay = 1;
    num     = [-0.4 0.1];
    den     = [1 0.24 0.1];
    M0      = idtf(num,den,'IODelay',iodelay)

%   Hit any key

    pause
    clc
    
%   The input and output are assumed to be uniformly sampled, i.e. the
%   sampling time Ts is constant.

    Ts = 0.05;

%   A relay feedback test is used to generate the data. In the CONTSID
%   toolbox this is realized by RELAY. Let us consider a noise-free
%   situation. RELAY will generate 50 limit cycles in its default setting.

    data_det = relay(num,den,Ts,'IODelay',iodelay);
    figure
    plot(data_det)
    set(gca,'xlim',[0 100])
    
%   Note that the output amplitude of the relay is [+1 -1] in the default
%   setting.
    
%   Additionally, the input intersample behaviour is specified by setting
%   the property 'Intersample' to 'zoh' since the input is piecewise
%   constant here.

    shg
%   Hit any key

    pause
    clc
    

%   It is possible to specify an output noise by passing a 'var' parameter
%   when using RELAY. For example, when the signal-to-noise ratio is 15 db
%   the noisy data can be generated by the following command.

    snr = 15;
    data = relay(num,den,Ts,'IODelay',iodelay,'Amp',[1,-1],...
        'Hyst',[1 -1],'SNR',snr);
    
    figure
    plot(data)
    set(gca,'xlim',[0 100]) 
    
%   Note that in order to avoid spurious switching caused by noise when the
%   output response is crossing zero, we have specified the 'hysteresis'
%   property. It can be seen from the noise-free response that the output
%   is in [2 -2], thus it is approriate to let the hysteresis be [1 -1].

    shg
%   Hit any key

    pause
    clc
    
%   We will identify continuous-time models for this system from the data 
%   object with the TFFCOE algorithm. The extra information
%   required are the number of poles and zeros, i.e. np and nz.

    nz = length(num) - 1;
    np = length(den)-1;
    
    M = tffcoe(data,np,nz)

    %%
    
%   The results are good. Note that the iterative search is initiated  (in
%   its default settings) by testing several time delay values in the
%   time-delay range.

%   Hit any key

    pause
    clc
    
%   We can compare the step response of the noise-free true and estimated
%   model by using the command STEP.

    figure
    step(M0,M)
    legend('True model','Estimated by TFFCOE')
    set(findall(gcf,'type','text'),'FontSize',13)
    set(gca,'FontSize',13)
    
    shg
%   Hit any key
    pause

    clc    
%   See the help of TFFCOE for more explanations. See also TFFSRIVC

%   Hit any key
    pause
    
    echo off
    close all
    clc    
